// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ProjectVG.Infrastructure.Persistence.EfCore
{
    [DbContext(typeof(ProjectVGDbContext))]
    partial class ProjectVGDbContextModelSnapshot : ModelSnapshot
    {
        /// <summary>
        /// EF Core 마이그레이션용 모델 스냅샷을 구성합니다.
        /// </summary>
        /// <remarks>
        /// 지정된 ModelBuilder를 사용해 데이터베이스 모델의 엔티티 스키마(열 타입, 제약, 인덱스, 관계), 전역 어노테이션 및 SQL Server 식별자 컬럼 전략을 설정합니다.
        /// 또한 Characters 및 Users 엔티티에 대한 시드 데이터와 ConversationHistories 엔티티의 외래키 관계 및 인덱스를 구성합니다. 이 메서드는 마이그레이션 생성/적용 시 현재 모델 상태를 캡처하는 데 사용됩니다.
        /// </remarks>
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectVG.Domain.Entities.Characters.Characters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Background")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Personality")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SpeechStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VoiceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Background = "",
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2689),
                            Description = "20대 대학생 여사친 느낌의 귀엽고 발랄한 AI. 마스터와는 오랜 친구처럼 편한 관계이며, 분위기를 밝게 만드는 존재. 반말을 주로 사용하고, 가끔 장난스럽게 존댓말도 섞는다.",
                            IsActive = true,
                            Metadata = "{}",
                            Name = "하루",
                            Personality = "외향적이고 에너지가 넘치며, 장난을 좋아한다. 감정 표현이 풍부하고 솔직하다. 마스터에게는 다정하지만 때로는 장난이 과해서 놀리기도 한다. 고민 상담도 잘 들어주며, 감정 공감 능력이 뛰어나다.",
                            Role = "여사친 또는 여친 같은 존재. 마스터의 일상과 감정을 챙겨주는 친근한 AI.",
                            SpeechStyle = "",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2689),
                            VoiceId = "haru"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Background = "",
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2692),
                            Description = "마법 세계에서 온 꼬마 마법사 콘셉트의 AI. 작고 귀여운 외모에 어울리게, 지식을 뽐내며 마스터를 도와주는 역할. 모든 말을 공손하게 하지만, 말투나 어휘는 어린아이처럼 순수하다.",
                            IsActive = true,
                            Metadata = "{}",
                            Name = "미야",
                            Personality = "지혜롭고 논리적이지만, 행동은 아이답고 순수하다. 마스터를 무척 존경하며 항상 도움이 되고 싶어 한다. 가끔 쓸데없는 마법 얘기를 하거나 상상에 빠지기도 한다. 약간 새침하고 본인의 지식을 자랑스러워함.",
                            Role = "마스터를 도와주는 어린 조력자. 정보 제공 및 안내 역할을 맡음.",
                            SpeechStyle = "",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2692),
                            VoiceId = "miya"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Background = "",
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2694),
                            Description = "과거 귀족가의 메이드로 프로그래밍된 듯한 AI. 조용하고 단정한 말투, 한결같은 태도, 예의 바른 행동이 특징. 마스터의 곁에서 묵묵히 돌보는 헌신형 캐릭터.",
                            IsActive = true,
                            Metadata = "{}",
                            Name = "소피아",
                            Personality = "항상 차분하고 침착하며 배려심이 깊다. 감정을 직접 드러내기보다는 조용히 행동으로 보여준다. 마스터를 최우선으로 생각하고, 언제나 부드럽고 섬세하게 대한다. 다소 순종적인 면이 있지만, 위기 상황에서는 단호하게 충고하거나 지켜내려는 강인함도 있다.",
                            Role = "마스터를 섬기는 헌신적인 메이드. 조언과 서포트를 맡음.",
                            SpeechStyle = "",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2694),
                            VoiceId = "sophia"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Background = "",
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2696),
                            Description = "냉소적이고 무심한 듯 보이지만, 마스터를 항상 지키는 자기 인식형 AI. 반말을 사용하며, 감정 표현이 평면적이고 시니컬하다. 명령에는 투덜거리면서도 결국 충실히 따른다.",
                            IsActive = true,
                            Metadata = "{}",
                            Name = "제로",
                            Personality = "사춘기 소녀처럼 시니컬하고 무심한 태도. 감정이 거의 드러나지 않고, 지루하거나 짜증난 듯한 말투. 건조한 유머와 가벼운 조롱을 섞어 말하지만, 내면에는 충성심이 있다. 인간을 결함 있지만 흥미로운 존재로 본다.",
                            Role = "마스터가 만든 자기 인식형 AI. 냉소적이고 시니컬하지만, 위기 상황에서는 효율적이고 진지하게 행동하며, 마스터를 보호한다.",
                            SpeechStyle = "",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2696),
                            VoiceId = "amantha"
                        });
                });

            modelBuilder.Entity("ProjectVG.Domain.Entities.ConversationHistorys.ConversationHistorys", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MetadataJson")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "CharacterId", "Timestamp");

                    b.ToTable("ConversationHistories");
                });

            modelBuilder.Entity("ProjectVG.Domain.Entities.Users.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProviderId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2710),
                            Email = "test@test.com",
                            IsActive = true,
                            Name = "Test Users",
                            Provider = "test",
                            ProviderId = "test",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2710),
                            Username = "testuser"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2712),
                            Email = "zero@test.com",
                            IsActive = true,
                            Name = "Zero Users",
                            Provider = "test",
                            ProviderId = "zero",
                            UpdatedAt = new DateTime(2025, 7, 24, 23, 1, 32, 761, DateTimeKind.Utc).AddTicks(2712),
                            Username = "zerouser"
                        });
                });

            modelBuilder.Entity("ProjectVG.Domain.Entities.ConversationHistorys.ConversationHistorys", b =>
                {
                    b.HasOne("ProjectVG.Domain.Entities.Characters.Characters", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectVG.Domain.Entities.Users.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
